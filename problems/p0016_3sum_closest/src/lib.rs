pub struct Solution {}

impl Solution {
    pub fn three_sum_closest(mut nums: Vec<i32>, target: i32) -> i32 {
        nums.sort_unstable();

        let mut min_diff = std::i32::MAX;

        for i in 0..nums.len() - 2 {
            for j in i + 1..nums.len() - 1 {
                let diff = target - (nums[i] + nums[j]);
                match nums[j + 1..].binary_search(&diff) {
                    Ok(_) => return target,
                    Err(k) => {
                        if 0 < k && (diff - nums[j + k]).abs() < min_diff.abs() {
                            min_diff = diff - nums[j + k];
                        }
                        if j + k + 1 < nums.len() && (diff - nums[j + k + 1]).abs() < min_diff.abs()
                        {
                            min_diff = diff - nums[j + k + 1];
                        }
                    }
                }
            }
        }

        target - min_diff
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_0016() {
        assert_eq!(
            Solution::three_sum_closest(
                vec![
                    533, 215, 663, -488, 31, -2, -591, -16, 648, 102, -754, -177, -343, 331, 553,
                    -15, -282, -654, -816, 885, 477, -20, -111, 469, 299, -609, -960, -969, 785,
                    699, -804, -440, -465, 329, 65, -437, -379, -977, -832, -96, -843, 527, 484,
                    501, -159, 263, 850, 491, -932, 265, -659, 425, 664, 876, -861, 152, -735,
                    -756, -645, 596, -958, 174, -972, -796, -630, 432, -704, 430, -131, 597, -21,
                    -456, -60, 930, -26, 82, 688, 812, 30, 333, -506, 378, 466, 384, 62, 44, -503,
                    -223, -939, -66, 431, 411, -9, 355, -243, -501, 545, 111, 93, -150, 629, 332,
                    -289, 51, -722, 854, -345, 465, 246, 187, -682, -916, 368, 328, -890, -752,
                    806, -982, -508, 321, 716, -77, 33, -281, -14, -266, 73, -64, -946, 121, 795,
                    -768, -114, 81, -402, -28, -462, 768, -412, 275, -922, -848, -483, -725, -979,
                    -333, 649, -680, 327, -587, -781, 173, 47, 481, -148, 728, -136, -822, 999,
                    395, -727, -891, -355, 871, 692, 940, -224, 917, 147, -655, 175, -219, 199,
                    172, -951, 603, -356, 967, 256, 985, -590, -23, 480, 672, 736, 454, 79, 294,
                    -518, -711, 280, -944, 424, -29, -165, -851, 123, -511, -327, 700, 202, 440,
                    -566, -441, -409, 571, 49, -254, 521, 994, 85, -431, -19, -963, -142, -169,
                    -856, -570, -65, 909, -194, -119, -998, 419, 723, 240, -284, 798, -365, 463,
                    -187, -351, 125, 659, -694, 980, -927, -354, -405, -155, 241, 576, 734, -132,
                    489, 884, -672, -689, 748, 381, 537, -509, 110, -403, -646, -74, 80, -791, 676,
                    661, -955, -593, -85, -450, -703, 735, 320, 473, -413, -269, 397, 524, -255,
                    959, -638, -911, -528, 25, 547, -674, -929, -730, -712, 769, 222, 126, 931,
                    -897, 933, 151, 164, -690, -684, 270, -707, 556, -176, 374, -710, -310, 252,
                    313, 221, -73, -642, -466, 896, -472, -676, 447, -537, -714, -400, 71, 624,
                    -908, -906, 213, -650, -68, 662, -516, 993, -443, -353, 567, -577, 554, -38,
                    -560, 511, -436, -831, -429, 640, 525, -141, 248, 217, -818, 471, 665, -744,
                    472, -257, 204, -784, -493, -130, -957, 573, -615, 288, 245, 555, 207, -600,
                    -250, -829, -767, -835, 843, -678, 345, 442, 958, 757, 115, -381, 334, 402,
                    974, 826, -138, 341, -641, 976, 218, 60, 386, -857, -686, 960, -205, 20, 282,
                    -865, -803, 171, 90, 56, -616, -479, 32, 777, 258, 167, -154, 910, -366, 619,
                    -507, -500, 633, -782, -800, -586, 504, -115, -868, -515, 540, 21, 182, -180,
                    -232, -510, -652, 267, 830, 737, 9, -401, 767, 410, -238, 916, 468, 486, 900,
                    389, 54, -688, 131, -423, 5, 818, 316, -798, 319, 496, -123, 235, -886, -978,
                    371, -941, 742, 776, -815, 0, 836, -915, 393, -100, 780, -527, -559, -166,
                    -987, 810, 877, -757, 721, 637, 277, -997, 544, -999, -842, -378, 362, 549,
                    608, -25, 16, 514, 186, -444, 385, -358, -945, 55, 546, 305, -184, 886, 403,
                    584, -952, -128, -338, 991, 107, 352, -45, -178, 654, -80, -411, 450, 348,
                    -314, -743, 413, 474, 797, -571, 249, 765, -732, 690, 965, -877, 346, 745,
                    -974, 232, -18, 78, 330, -221, -753, -494, -734, -971, -551, -407, -188, 297,
                    565, 457, -894, 682, -328, -512, -935, -956, -124, -618, 841, -321, 753, -526,
                    -565, 57, -792, 695, 532, -628, -592, -830, -186, -625, 408, -567, -538, 687,
                    -1, 122, 773, -346, 979, 927, 802, 87, -933, 764, -701, -359, -729, -227, 48,
                    863, 467, 365, -635, 163, 615, -990, -632, -880, 148, 599, 412, 254, -833, 225,
                    -633, 831, -594, 88, -51, 645, -4, 264, -272, -71, 710, 634, 285, -863, 762,
                    -464, -421, -143, 858, -907, 165, 962, -253, 984, 323, -325, 919, 8, 867, -222,
                    718, 68, -302, -879, 851, 18, 108, -199, -336, 392, 105, 15, 968, 656, -458,
                    -773, 639, 559, 291, 782, 579, -673, 296, -573, 983, -397, 46, -62, 542, 864,
                    839, 335, -497, 169, -549, 646, -602, -206, -264, 800, -55, -823, 39, 669,
                    -667, -962, -248, 13, 445, -872, 895, -99, -395, 642, 956, 992, 214, -720, 290,
                    934, 14, 96, -471, -30, 191, -966, 278, -740
                ],
                3904
            ),
            2986
        );
        assert_eq!(Solution::three_sum_closest(vec![-1, 2, 1, -4], 1), 2);
        assert_eq!(Solution::three_sum_closest(vec![0, 0, 0], 1), 0);
    }
}
